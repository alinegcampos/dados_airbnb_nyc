# -*- coding: utf-8 -*-
"""NYC _Airbnb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i4M8EPqmIXwV1j6-yHdHzaWyRPYED2XY
"""

import pandas as pd
import seaborn as sns
import numpy as np
sns.set(style="darkgrid")
from matplotlib import pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/AB_NYC_2019.csv')

df

df.shape

df.head(3)

df.columns

df['room_type'].unique()

df[['Private room', 'Entire home/apt', 'Shared room']]=pd.get_dummies(df['room_type'])
df.head()

df['neighbourhood_group'].unique()

df[['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']]=pd.get_dummies(df['neighbourhood_group'])
df.head()

df[['neighbourhood_group','room_type', 'price', 'minimum_nights', 'availability_365']]

df.info()

df.isnull().sum()

df['neighbourhood_group'].value_counts()

df['minimum_nights'].value_counts()

df['price'].value_counts()

df['room_type'].value_counts()

plt.figure(figsize=(20,7));
plt.title('Price By Neigbourhood');
plt.xlim(0,500);
sns.boxplot(x='price',
            y='neighbourhood_group', 
            data=df)

plt.figure(figsize=(20,7));
plt.title('Price By Neigbourhood');
plt.xlim(0,500);
sns.boxplot(x='price',
            y='neighbourhood_group', 
            data=df,
            hue='room_type')

dfny = df.groupby(['neighbourhood_group', 'room_type'])[['price']].mean().round(2)
dfny

df.groupby(['neighbourhood_group', 'room_type'])[['price']].mean().round(2).plot(kind='bar')

df.columns

df.describe()

X = df[['Private room','Entire home/apt', 'Shared room','Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']]

y = df['price']

from sklearn.model_selection import train_test_split    ##treino/teste modelo 10%
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.1)

from sklearn.linear_model import LinearRegression    
from sklearn.metrics import mean_squared_error, r2_score

reg_linear = LinearRegression().fit(X_train, y_train)

reg_linear.score(X_train,y_train)

y_pred_reg_lin = reg_linear.predict(X_test)

print('MSE = ',mean_squared_error(y_test, y_pred_reg_lin), 'R2 = ',r2_score(y_test,y_pred_reg_lin))

df_corr.corr()

df_corr = df[['Private room','Entire home/apt', 'Shared room','Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx', 'price']]

regressor = DecisionTreeRegressor(max_depth=50).fit(X_train, y_train)

from sklearn.tree import DecisionTreeRegressor

regressor.score(X_train,y_train)

y_pred_regressor= regressor.predict(X_test)

print('MSE = ',mean_squared_error(y_test, y_pred_regressor), 'R2 = ',r2_score(y_test,y_pred_regressor))